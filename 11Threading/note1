内容回顾

操作系统的作用：
    1. 把硬件丑陋复杂的接口隐藏起来，为应用程序提供良好接口
    2. 管理，调用进程，并且把进程之间对硬件的竞争变得有序化

多道技术：
    1. 产生背景：为了实现单CPU下的并发效果
    2. 分为两部分：
        空间上的复用(必须实现硬件层面的隔离)
        时间上的复用(复用cpu的时间片)
        - 什么时候切换？
            -- 正在执行的任务遇到的阻塞
            -- 正在执行的任务运行时间长

进程：正在运行的一个过程/一个任务，由操作系统负载调度，然后由CPU负责执行
程序：就是程序员写的代码
并发：伪并行，单核+多道
并行：只有多核才能实现真正的并行

同步：打电话
异步：发短信

进程的创建：
    1. 系统初始化
    2. 与用户交互
    3. 在执行一个进程的过程中调用(Popen, OS.fork, subprocess)
    4. 批处理任务

系统的调用：
    Linux：fork
    Windows：CreateProcess

Linux的下的进程与Windows下的区别：
    1. Linux下的建有父子关系，是一种树形结构，Windowx下没有这种关系
    2. Linux创建新的进程需要copy父进程的地址空间，Windows下最开始创建进程，两个进程之间就是不一样

进程并发的实现需要保存上下文信息，然后可以去做其他事情，返回时根据保存的信息再次执行
yield类似这种机制

进程池
from multiprocessing import Pool

pool = Pool()
pool.apply_async(task, args(i,), callback=func)
callback是主进程负责处理，res.get()异步进程有结果，主进程就开始处理
所以可以把费时的任务交个进程次去处理

需要回调函数的场景：进程池中任何一个任务一旦处理完了，就立即告知主进程：我好了，你可以处理我的结果了。
主进程则调用一个函数去处理该结果，该函数即回调函数

我们可以把耗时间（阻塞）的任务放到进程池中，然后指定回调函数（主进程负责执行），
这样主进程在执行回调函数时就省去了I/O的过程，直接拿到的是任务的结果。

如果在主进程中等待进程池中所有任务都执行完毕后，再统一处理结果，则无需回调函数


