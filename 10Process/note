为什么要有操作系统
程序员无法把所有的硬件操作系统细节，繁琐的工作就是操作系统来干

什么是操作系统
操作系统就是一个协调、管理和控制计算机硬件资源和软件资源的控制程序
操作系统位于计算机硬件与应用软件之间，本质是一个软件
    - 由操作系统内核(运行于内核态，管理硬件资源)
    - 以及系统调用(运行于用户态，为应用程序员写的应用程序提供系统调用接口)两部分组成

操作系统发展历史
第一代计算机：真空管和穿孔卡片
第二代计算机：晶体管和批处理系统
    - 侧重IO，如IBM 1401
    - 侧重计算，如IBM 7094
第三代计算机：集成电路芯片和多道程序设计
    - CPU在执行命令期间，有可以操作硬盘，CPU块，操作硬盘慢，有时间差，所有CPU可以做其他事情
    - 空间上的复用(内存的空间)：内存同一时刻存放多个程序
    - 时间上的复用(CPU的时间)：CPU遇到IO操作，不暂停，切为另外程序；CPU没有IO，一个程序执行一段时间，再执行另外程序
    ----保护硬件(程序之间的内存彼此隔离)
第四代计算机：个人计算机

什么是进程
进程：正在进行的一个过程或者说一个任务，而负责执行任务则是CPU

进程与程序的区别
程序仅仅是一堆代码而已，而进程指的是程序的运行过程
注：同一程序执行两次，那也是两个进程

并发与并行
    - 并行：同时运行，只有具备多个CPU才能实现并行
    - 并发：是伪并行，即看起来是同时运行

同步与异步
    - 同步是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，
      那么这个进程将会一直等待下去，直到收到返回的信息才继续执行下去
    - 异步是指进程不需要一直等待下去，而是继续执行下面的操作，不管其他进程的操作
      当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率
举个例子：打电话是同步通信，发消息是异步通信

进程的状态：运行、阻塞和就绪
运行 -> 阻塞：进程为等待输入而阻塞
运行 -> 就绪：调度进程选择另一个进程
就绪 -> 运行：调度进程选择这个进程
阻塞 -> 就绪：出现有效输入


什么是线程
    - 在传统操作系统中，每个进程有一个地址空间，而且默认就有一个控制线程
    - 流水线 -->  车间
进程只是用来把资源集中到一起(进程只是一个资源单位，或者说资源集合)，而线程才是cpu上的执行单位
举个例子：北京地铁与上海地铁是不同的进程，而北京地铁里的13号线是一个线程

为何要用多线程
    - 多线程共享一个进程的地址空间
    - 线程比进程更轻量级，线程比进程更容易创建和撤销
    - I/O密集型应用，一个进程多个线程在I/O应用来回切，I/O有延时
注：Python中，4个CPU，1个进程中4个线程，只能有1个出来用CPU

线程与进程的区别
    - 线程共享它进程的地址空间；进程间地址空间独立
    - 线程可以直接访问它的进程；进程与它的父进程时独立拷贝
    - 线程间可以直接通信；进程间需通过IPC或消息队列通信
    - 线程容易创建；进程是父进程独立拷贝，费时
    - 线程可以控制其他线程；进程只能控制子进程
    - 改变主线程影响其他线程；改变父进程不会影响子进程


进程同步(锁)
进程之间数据不共享，但共享同一套文件系统，所以访问同一个文件，或同一个打印终端是没有问题的
而共享带来的是竞争，竞争带来的结果就是错乱，如果控制，就是加锁处理

